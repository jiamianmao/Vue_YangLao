<template>
    <div id="container" v-loading.body="loading"></div>
</template>
<script>
export default {
  data() {
    return {
      center: "",
      list: [],
      loading: false
    };
  },
  async created() {
    try {
      this.loading = true;
      let res = await this.$http.get("http://mp.17link.cc/org/position");
      let { list, center } = res.data.data;
      this.center = center.split(",");
      list.forEach(v => (v.position = v.position.split(",")));
      this.list = list
      
      // this.drowMap()   // 高德地图  58前端的遗迹
      this.drowEcharts()
    } catch (e) {
      console.log(e);
    }
  },
  methods: {
    drowMap() {
      console.log(this.center);
      console.log(this.list);
      let map = new AMap.Map("container", {
        resizeEnable: true,
        zoom: 11,
        center: this.center
      });

      for (let i = 0; i < this.list.length; i++) {
        let marker = new AMap.Marker({
          position: this.list[i].position,
          title: this.list[i].title
        });
        marker.setMap(map);
      }

      map.plugin(["AMap.ToolBar"], function() {
        map.addControl(new AMap.ToolBar());
      });

      let _this = this;
      map.on("complete", function() {
        _this.loading = false;
      });
    },
    drowEcharts() {
      this.loading = false
      // 初始化
      this.myChart = echarts.init(document.getElementById("container"));
      // console.log(this.list, this.center)
      let data = []
      let geoCoordMap = {}
      this.list.forEach((item) => {
        data.push({
          name: item.title,
          value: 1
        })
      })
      this.list.forEach((item, index) => {
        geoCoordMap[item.title] = item.position
      })
      // console.log(data, geoCoordMap)
      let convertData = function(data) {
        var res = [];
        for (var i = 0; i < data.length; i++) {
          var geoCoord = geoCoordMap[data[i].name];
          if (geoCoord) {
            res.push({
              name: data[i].name,
              value: geoCoord.concat(data[i].value)
            });
          }
        }
        return res;
      }
      let cityData = [{
        name: '成都',
        value: [104.08139,30.658059,10]
      }]
      // echarts配置
      let option = {
        backgroundColor: "#404a59",
        title: {
          text: "机构分布",
          left: "center",
          textStyle: {
            color: "#fff"
          }
        },
        tooltip: {
          trigger: "item",
          formatter: function(obj) {
            // console.log(obj)
            return `${obj.name}`;
          }
        },
        bmap: {
          center: this.center,  // 地图中心点设置
          zoom: 11,   // 地图缩放比例
          roam: true,
          mapStyle: {
            styleJson: [
              {
                featureType: "water",
                elementType: "all",
                stylers: {
                  color: "#044161"
                }
              },
              {
                featureType: "land",
                elementType: "all",
                stylers: {
                  color: "#004981"
                }
              },
              {
                featureType: "boundary",
                elementType: "geometry",
                stylers: {
                  color: "#064f85"
                }
              },
              {
                featureType: "railway",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "highway",
                elementType: "geometry",
                stylers: {
                  color: "#004981"
                }
              },
              {
                featureType: "highway",
                elementType: "geometry.fill",
                stylers: {
                  color: "#005b96",
                  lightness: 1
                }
              },
              {
                featureType: "highway",
                elementType: "labels",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "arterial",
                elementType: "geometry",
                stylers: {
                  color: "#004981"
                }
              },
              {
                featureType: "arterial",
                elementType: "geometry.fill",
                stylers: {
                  color: "#00508b"
                }
              },
              {
                featureType: "poi",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "green",
                elementType: "all",
                stylers: {
                  color: "#056197",
                  visibility: "off"
                }
              },
              {
                featureType: "subway",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "manmade",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "local",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "arterial",
                elementType: "labels",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "boundary",
                elementType: "geometry.fill",
                stylers: {
                  color: "#029fd4"
                }
              },
              {
                featureType: "building",
                elementType: "all",
                stylers: {
                  color: "#1a5787"
                }
              },
              {
                featureType: "label",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              }
            ]
          }
        },
        series: [
          {
            name: "机构",
            type: "scatter",
            coordinateSystem: "bmap",
            data: convertData(data),
            symbolSize: function(val) {
              return val[2] * 10;
            },
            label: {
              normal: {
                formatter: "{b}",
                position: "right",
                show: false
              },
              emphasis: {
                show: false
              }
            },
            itemStyle: {
              normal: {
                color: "#ddb926"
              }
            }
          },
          {
            name: '',
            type: 'effectScatter',
            coordinateSystem: 'bmap',
            data: cityData,
            symbolSize: function (val) {
                return 20
            },
            showEffectOn: 'emphasis',
            rippleEffect: {
                brushType: 'stroke'
            },
            hoverAnimation: true,
            label: {
                normal: {
                    formatter: '{b}',
                    position: 'right',
                    show: true
                }
            },
            itemStyle: {
                normal: {
                    color: '#f4e925',
                    shadowBlur: 10,
                    shadowColor: '#333'
                }
            },
            zlevel: 1
          },
        ]
      };
      this.myChart.setOption(option);
    }
  }
};
</script>
<style lang="scss" scoped>
#container {
  height: calc(100vh - 54px);
  width: 100%;
  margin: 0 auto;
}
</style>
