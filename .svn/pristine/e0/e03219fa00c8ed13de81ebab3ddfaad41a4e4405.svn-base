<template>
    <div>
        <el-form :model="formData" inline label-width="100px" label-position="left">
            <el-row>
                <mapArea :ifEdit='isOrg' ref="area"
                          title="区域位置"
                          @select-change="selectChange"
                          curNum="0">
                </mapArea>
            </el-row>
            <el-row>
                <el-form-item label="老人状况">
                    <el-radio-group v-model="formData.type" @change="getMapData">
                        <el-radio v-for="(item,index) in ['全部','高龄','独居','空巢','失独']"
                                     :key="index"
                                     :label="index">{{item}}</el-radio>
                    </el-radio-group>
                </el-form-item>
            </el-row>
        </el-form>
        <el-row>
            <div id="container" v-loading.body="loading"></div>
        </el-row>
    </div>
</template>
<script>
    import mapArea from '../../components/mapArea.vue';
    import { mapGetters } from 'vuex'
    export default {
        data() {
            return {
                formData: {
                    //老人状态
                    type: "",
                    //省
                    province: "",
                    //市
                    city: "",
                    //区
                    zone: "",
                    //街道
                    street: ""
                },
                center: "",
                list: [],
                loading: false
            };
        },
        mounted: function(){
            this.getMapData();
        },
        components: {
            mapArea
        },
        methods: {
            //请求mapData
            async getMapData(){
                try {
                    let data = {};
                    this.loading = true;
                    if(this.formData.type === 0) {
                        for(let k in this.formData){
                            data[k] = this.formData[k];
                            data.type = "";
                        }
                    }else{
                        data = this.formData;
                    };
                    let res = await this.$http.post('http://mp.17link.cc/user/position',data)
                    let { center,list } = res.data.data
                    this.center = center.split(",");
                    list.forEach(v=>v.position = v.position.split(","));
                    this.list = list;
                    // this.drowMap()    // 58技术遗迹
                    this.drowEcharts()  // 加载echarts
                } catch (e) {
                    console.log(e);
                }
            },
            drowMap(){
                let map = new AMap.Map('container', {
                    resizeEnable: true,
                    zoom:11,
                    center: this.center
                });

                for(let i=0;i<this.list.length;i++){
                    let marker = new AMap.Marker({
                        position: this.list[i].position,
                        title: this.list[i].title + ": " +this.list[i].userNum
                    });
                    marker.setMap(map);
                }

                map.plugin(["AMap.ToolBar"], function() {
                    map.addControl(new AMap.ToolBar());
                });

                let _this = this;
                map.on('complete', function() {
                    _this.loading = false;
                });
            },
            drowEcharts () {
              this.loading = false
              // 初始化
              this.myChart = echarts.init(document.getElementById("container"));
              // console.log(this.list, this.center)
              let data = []
              let geoCoordMap = {}
              this.list.forEach((item) => {
                data.push({
                  name: item.title,
                  value: 1
                })
              })
              this.list.forEach((item, index) => {
                geoCoordMap[item.title] = item.position
              })
              // console.log(data, geoCoordMap)
              let convertData = function(data) {
                var res = [];
                for (var i = 0; i < data.length; i++) {
                  var geoCoord = geoCoordMap[data[i].name];
                  if (geoCoord) {
                    res.push({
                      name: data[i].name,
                      value: geoCoord.concat(data[i].value)
                    });
                  }
                }
                return res;
              }
              let cityData = [{
                name: '成都',
                value: [104.08139,30.658059,10]
              }]
              // echarts配置
              let option = {
                backgroundColor: "#404a59",
                title: {
                  text: "机构分布",
                  left: "center",
                  textStyle: {
                    color: "#fff"
                  }
                },
                tooltip: {
                  trigger: "item",
                  formatter: function(obj) {
                    // console.log(obj)
                    return `${obj.name}`;
                  }
                },
                bmap: {
                  center: this.center,  // 地图中心点设置
                  zoom: 11,   // 地图缩放比例
                  roam: true,
                  mapStyle: {
                    styleJson: [
                      {
                        featureType: "water",
                        elementType: "all",
                        stylers: {
                          color: "#044161"
                        }
                      },
                      {
                        featureType: "land",
                        elementType: "all",
                        stylers: {
                          color: "#004981"
                        }
                      },
                      {
                        featureType: "boundary",
                        elementType: "geometry",
                        stylers: {
                          color: "#064f85"
                        }
                      },
                      {
                        featureType: "railway",
                        elementType: "all",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "highway",
                        elementType: "geometry",
                        stylers: {
                          color: "#004981"
                        }
                      },
                      {
                        featureType: "highway",
                        elementType: "geometry.fill",
                        stylers: {
                          color: "#005b96",
                          lightness: 1
                        }
                      },
                      {
                        featureType: "highway",
                        elementType: "labels",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "arterial",
                        elementType: "geometry",
                        stylers: {
                          color: "#004981"
                        }
                      },
                      {
                        featureType: "arterial",
                        elementType: "geometry.fill",
                        stylers: {
                          color: "#00508b"
                        }
                      },
                      {
                        featureType: "poi",
                        elementType: "all",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "green",
                        elementType: "all",
                        stylers: {
                          color: "#056197",
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "subway",
                        elementType: "all",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "manmade",
                        elementType: "all",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "local",
                        elementType: "all",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "arterial",
                        elementType: "labels",
                        stylers: {
                          visibility: "off"
                        }
                      },
                      {
                        featureType: "boundary",
                        elementType: "geometry.fill",
                        stylers: {
                          color: "#029fd4"
                        }
                      },
                      {
                        featureType: "building",
                        elementType: "all",
                        stylers: {
                          color: "#1a5787"
                        }
                      },
                      {
                        featureType: "label",
                        elementType: "all",
                        stylers: {
                          visibility: "off"
                        }
                      }
                    ]
                  }
                },
                series: [
                  {
                    name: "机构",
                    type: "scatter",
                    coordinateSystem: "bmap",
                    data: convertData(data),
                    symbolSize: function(val) {
                      return val[2] * 10;
                    },
                    label: {
                      normal: {
                        formatter: "{b}",
                        position: "right",
                        show: false
                      },
                      emphasis: {
                        show: false
                      }
                    },
                    itemStyle: {
                      normal: {
                        color: "#ddb926"
                      }
                    }
                  },
                  {
                    name: '',
                    type: 'effectScatter',
                    coordinateSystem: 'bmap',
                    data: cityData,
                    symbolSize: function (val) {
                        return 20
                    },
                    showEffectOn: 'emphasis',
                    rippleEffect: {
                        brushType: 'stroke'
                    },
                    hoverAnimation: true,
                    label: {
                        normal: {
                            formatter: '{b}',
                            position: 'right',
                            show: true
                        }
                    },
                    itemStyle: {
                        normal: {
                            color: '#f4e925',
                            shadowBlur: 10,
                            shadowColor: '#333'
                        }
                    },
                    zlevel: 1
                  },
                ]
              };
              this.myChart.setOption(option);
            },
            selectChange(argus){
                console.log(argus);
                this.formData.province = argus.provinceName;
                this.formData.city = argus.cityName;
                this.formData.zone = argus.areaName;
                this.formData.street = argus.streetName;
                //
                this.getMapData();

            }
        },
        computed: {
          ...mapGetters([
            'isOrg'
          ])
        }
    };
</script>
<style lang="scss" scoped>
    #container{
        height: 700px;
        width: 90%;
        margin: 0 auto;
    }
</style>
